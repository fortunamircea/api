/*
 * This file is generated by jOOQ.
 */
package persistence.db.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import persistence.db.Keys;
import persistence.db.Public;
import persistence.db.tables.records.CartRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cart extends TableImpl<CartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cart</code>
     */
    public static final Cart CART = new Cart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CartRecord> getRecordType() {
        return CartRecord.class;
    }

    /**
     * The column <code>public.cart.id</code>.
     */
    public final TableField<CartRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.cart.customers_id</code>.
     */
    public final TableField<CartRecord, UUID> CUSTOMERS_ID = createField(DSL.name("customers_id"), SQLDataType.UUID.nullable(false), this, "");

    private Cart(Name alias, Table<CartRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cart(Name alias, Table<CartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cart</code> table reference
     */
    public Cart(String alias) {
        this(DSL.name(alias), CART);
    }

    /**
     * Create an aliased <code>public.cart</code> table reference
     */
    public Cart(Name alias) {
        this(alias, CART);
    }

    /**
     * Create a <code>public.cart</code> table reference
     */
    public Cart() {
        this(DSL.name("cart"), null);
    }

    public <O extends Record> Cart(Table<O> child, ForeignKey<O, CartRecord> key) {
        super(child, key, CART);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CartRecord> getPrimaryKey() {
        return Keys.CART_PKEY;
    }

    @Override
    public List<UniqueKey<CartRecord>> getKeys() {
        return Arrays.<UniqueKey<CartRecord>>asList(Keys.CART_PKEY);
    }

    @Override
    public List<ForeignKey<CartRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CartRecord, ?>>asList(Keys.CART__FK_CUSTOMERS);
    }

    private transient Customers _customers;

    public Customers customers() {
        if (_customers == null)
            _customers = new Customers(this, Keys.CART__FK_CUSTOMERS);

        return _customers;
    }

    @Override
    public Cart as(String alias) {
        return new Cart(DSL.name(alias), this);
    }

    @Override
    public Cart as(Name alias) {
        return new Cart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cart rename(String name) {
        return new Cart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cart rename(Name name) {
        return new Cart(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
