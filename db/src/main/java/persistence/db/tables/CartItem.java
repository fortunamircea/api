/*
 * This file is generated by jOOQ.
 */
package persistence.db.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import persistence.db.Keys;
import persistence.db.Public;
import persistence.db.tables.records.CartItemRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CartItem extends TableImpl<CartItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cart_item</code>
     */
    public static final CartItem CART_ITEM = new CartItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CartItemRecord> getRecordType() {
        return CartItemRecord.class;
    }

    /**
     * The column <code>public.cart_item.id</code>.
     */
    public final TableField<CartItemRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.cart_item.product_id</code>.
     */
    public final TableField<CartItemRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cart_item.cart_id</code>.
     */
    public final TableField<CartItemRecord, UUID> CART_ID = createField(DSL.name("cart_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cart_item.quantity</code>.
     */
    public final TableField<CartItemRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.cart_item.created_at</code>.
     */
    public final TableField<CartItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.cart_item.updated_at</code>.
     */
    public final TableField<CartItemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private CartItem(Name alias, Table<CartItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private CartItem(Name alias, Table<CartItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cart_item</code> table reference
     */
    public CartItem(String alias) {
        this(DSL.name(alias), CART_ITEM);
    }

    /**
     * Create an aliased <code>public.cart_item</code> table reference
     */
    public CartItem(Name alias) {
        this(alias, CART_ITEM);
    }

    /**
     * Create a <code>public.cart_item</code> table reference
     */
    public CartItem() {
        this(DSL.name("cart_item"), null);
    }

    public <O extends Record> CartItem(Table<O> child, ForeignKey<O, CartItemRecord> key) {
        super(child, key, CART_ITEM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CartItemRecord> getPrimaryKey() {
        return Keys.CART_ITEM_PKEY;
    }

    @Override
    public List<UniqueKey<CartItemRecord>> getKeys() {
        return Arrays.<UniqueKey<CartItemRecord>>asList(Keys.CART_ITEM_PKEY);
    }

    @Override
    public List<ForeignKey<CartItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CartItemRecord, ?>>asList(Keys.CART_ITEM__FK_PRODUCTS, Keys.CART_ITEM__FK_CART);
    }

    private transient Products _products;
    private transient Cart _cart;

    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.CART_ITEM__FK_PRODUCTS);

        return _products;
    }

    public Cart cart() {
        if (_cart == null)
            _cart = new Cart(this, Keys.CART_ITEM__FK_CART);

        return _cart;
    }

    @Override
    public CartItem as(String alias) {
        return new CartItem(DSL.name(alias), this);
    }

    @Override
    public CartItem as(Name alias) {
        return new CartItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CartItem rename(String name) {
        return new CartItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CartItem rename(Name name) {
        return new CartItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, UUID, BigDecimal, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
